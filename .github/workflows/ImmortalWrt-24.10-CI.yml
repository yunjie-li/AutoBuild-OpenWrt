#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: ImmortalWrt 24.10 CI

on:
  #push:
  #  branches: 
  #    - main
  #  paths: 
  #    - 'makeconfig.d/21.02/**'
  workflow_dispatch:
    inputs:
      arch:
        description: '选择设备'
        required: false
        default: 'x86_64'
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
        required: false
        default: 'no'   
        
  schedule: 
    - cron: 7 15 * * 5
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build ${{ matrix.arch }} firmware

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker images -q | xargs -r docker rmi
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /opt/az
          sudo -E apt-get -y purge ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          #sudo -E apt-get -y purge mysql*
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: clone sources code
        run: |
          git clone -b openwrt-24.10 --single-branch  --filter=blob:none https://github.com/immortalwrt/immortalwrt
          cd immortalwrt

      - name: clone customize package
        run: |
          cd immortalwrt
          echo "src-git nikki https://github.com/nikkinikki-org/OpenWrt-nikki.git;main" >> "feeds.conf.default"
          git clone https://github.com/gdy666/luci-app-lucky.git package/lucky
          git clone https://github.com/rufengsuixing/luci-app-adguardhome.git package/adguardhome/luci-app-adguardhome
          git clone https://github.com/AdguardTeam/AdGuardHome package/adguardhome/AdGuardHome

      - name: Update feeds
        run: |
          pwd
          cd immortalwrt
          pwd
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          mkdir -p files/root
          git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git files/root/.oh-my-zsh
          rm -rf files/root/.oh-my-zsh/.git
          cat > files/root/.zshrc << 'EOF'
          export ZSH=$HOME/.oh-my-zsh
          ZSH_THEME="ys"
          plugins=(git)
          source $ZSH/oh-my-zsh.sh
          EOF
          sed -i 's/\/bin\/ash/\/usr\/bin\/zsh/g' package/base-files/files/etc/passwd
          cd immortalwrt
          sed -i 's/192.168.1.1/192.168.2.253/g' ./package/base-files/files/bin/config_generate
          rm -f ./.config*
          cp ../makeconfig.d/24.10/${{ matrix.arch }}.config ./.config
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          cd immortalwrt
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          cd immortalwrt
          echo "$(nproc) CPU work!"
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
#          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          mkdir -p ./artifact/firmware1
          mkdir -p ./artifact/firmware2
          rm -rf $(find ./immortalwrt/bin/targets/ -type d -name "packages")
          cp -rf $(find ./immortalwrt/bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./immortalwrt/bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./immortalwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          #cp ./immortalwrt/bin/targets/x86/64/immortalwrt-x86-64-generic-squashfs-combined.img.gz ./artifact/firmware1
          #cp ./immortalwrt/bin/targets/x86/64/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz ./artifact/firmware2
          
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}_OpenWrt_buildinfo
          path: ./artifact/buildinfo/
          retention-days: 10

      - name: Deliver package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}_OpenWrt_package
          path: ./artifact/package/
          retention-days: 10

      - name: Deliver firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}_OpenWrt_firmware
          path: ./immortalwrt/bin/targets/
          retention-days: 10

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
